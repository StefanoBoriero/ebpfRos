// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type topic_message_counterNodeCreationEventT struct {
	Pid           uint32
	Uid           int32
	NodeName      [16]int8
	NodeNamespace [16]int8
}

// loadTopic_message_counter returns the embedded CollectionSpec for topic_message_counter.
func loadTopic_message_counter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Topic_message_counterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load topic_message_counter: %w", err)
	}

	return spec, err
}

// loadTopic_message_counterObjects loads topic_message_counter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*topic_message_counterObjects
//	*topic_message_counterPrograms
//	*topic_message_counterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTopic_message_counterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTopic_message_counter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// topic_message_counterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type topic_message_counterSpecs struct {
	topic_message_counterProgramSpecs
	topic_message_counterMapSpecs
}

// topic_message_counterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type topic_message_counterProgramSpecs struct {
	TopicMessageCount *ebpf.ProgramSpec `ebpf:"topicMessageCount"`
}

// topic_message_counterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type topic_message_counterMapSpecs struct {
	PidNodeMap         *ebpf.MapSpec `ebpf:"pidNodeMap"`
	TopicMessageOutput *ebpf.MapSpec `ebpf:"topicMessageOutput"`
}

// topic_message_counterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTopic_message_counterObjects or ebpf.CollectionSpec.LoadAndAssign.
type topic_message_counterObjects struct {
	topic_message_counterPrograms
	topic_message_counterMaps
}

func (o *topic_message_counterObjects) Close() error {
	return _Topic_message_counterClose(
		&o.topic_message_counterPrograms,
		&o.topic_message_counterMaps,
	)
}

// topic_message_counterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTopic_message_counterObjects or ebpf.CollectionSpec.LoadAndAssign.
type topic_message_counterMaps struct {
	PidNodeMap         *ebpf.Map `ebpf:"pidNodeMap"`
	TopicMessageOutput *ebpf.Map `ebpf:"topicMessageOutput"`
}

func (m *topic_message_counterMaps) Close() error {
	return _Topic_message_counterClose(
		m.PidNodeMap,
		m.TopicMessageOutput,
	)
}

// topic_message_counterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTopic_message_counterObjects or ebpf.CollectionSpec.LoadAndAssign.
type topic_message_counterPrograms struct {
	TopicMessageCount *ebpf.Program `ebpf:"topicMessageCount"`
}

func (p *topic_message_counterPrograms) Close() error {
	return _Topic_message_counterClose(
		p.TopicMessageCount,
	)
}

func _Topic_message_counterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed topic_message_counter_bpfeb.o
var _Topic_message_counterBytes []byte
