// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type message_takenNodeCreationEventT struct {
	Pid           uint32
	Uid           int32
	NodeName      [16]int8
	NodeNamespace [16]int8
}

// loadMessage_taken returns the embedded CollectionSpec for message_taken.
func loadMessage_taken() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Message_takenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load message_taken: %w", err)
	}

	return spec, err
}

// loadMessage_takenObjects loads message_taken and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*message_takenObjects
//	*message_takenPrograms
//	*message_takenMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMessage_takenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMessage_taken()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// message_takenSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type message_takenSpecs struct {
	message_takenProgramSpecs
	message_takenMapSpecs
}

// message_takenSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type message_takenProgramSpecs struct {
	MessageTaken *ebpf.ProgramSpec `ebpf:"messageTaken"`
}

// message_takenMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type message_takenMapSpecs struct {
	MessageTakenOutput *ebpf.MapSpec `ebpf:"messageTakenOutput"`
	PidNodeMap         *ebpf.MapSpec `ebpf:"pidNodeMap"`
}

// message_takenObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMessage_takenObjects or ebpf.CollectionSpec.LoadAndAssign.
type message_takenObjects struct {
	message_takenPrograms
	message_takenMaps
}

func (o *message_takenObjects) Close() error {
	return _Message_takenClose(
		&o.message_takenPrograms,
		&o.message_takenMaps,
	)
}

// message_takenMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMessage_takenObjects or ebpf.CollectionSpec.LoadAndAssign.
type message_takenMaps struct {
	MessageTakenOutput *ebpf.Map `ebpf:"messageTakenOutput"`
	PidNodeMap         *ebpf.Map `ebpf:"pidNodeMap"`
}

func (m *message_takenMaps) Close() error {
	return _Message_takenClose(
		m.MessageTakenOutput,
		m.PidNodeMap,
	)
}

// message_takenPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMessage_takenObjects or ebpf.CollectionSpec.LoadAndAssign.
type message_takenPrograms struct {
	MessageTaken *ebpf.Program `ebpf:"messageTaken"`
}

func (p *message_takenPrograms) Close() error {
	return _Message_takenClose(
		p.MessageTaken,
	)
}

func _Message_takenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed message_taken_bpfeb.o
var _Message_takenBytes []byte
